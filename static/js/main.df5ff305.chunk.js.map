{"version":3,"sources":["images/Spotify_Icon_RGB_White.png","components/Welcome.js","components/Song.js","components/Navbar.js","components/Customizations.js","components/Sliders.js","containers/CreatePlaylists.js","components/PlaylistCard.js","containers/SavedPlaylists.js","containers/User.js","components/ErrorMsg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Welcome","className","id","onClick","window","open","src","imgsrc","React","Component","Song","handleAddClick","console","log","setState","isAddClicked","state","convertMins","ms","minutes","Math","floor","leftover","seconds","leftPad","number","output","length","cellpadding","cellspacing","border","this","props","song","img","name","artist","duration_ms","Navbar","handleLogout","username","Customizations","addedSongs","e","handleAddSong","uri","Sliders","customizationButton","ev","target","value","valence","energy","tempo","danceability","handleSliderChange","handleCreatePlaylist","isCreateClicked","valenceFilter","allSongs","filter","energyFilter","tempoFilter","danceabilityFilter","filteredSongs","style","onChange","type","min","max","step","for","map","CreatePlaylists","isClicked","current_playlist","playlistSongs","songs","PlaylistCard","onPlaylistClick","playlist","SavedPlaylists","allPlaylists","includes","key","PLAYLISTS_URL","User","token","localStorage","getItem","fetch","then","resp","json","playlistSongData","clear","addSongs","newSongs","deleteUri","postPlaylist","preventDefault","method","headers","body","JSON","stringify","playlistname","uris","newPlaylist","prevState","unshift","current_user","location","search","substr","setItem","user_data","playlistData","songData","onSubmit","placeholder","ErrorMsg","App","serverData","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df5ff305.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spotify_Icon_RGB_White.cc4e2784.png\";","import React from 'react';\nimport { BrowserRouter as Route, Link } from 'react-router-dom'\nimport '../App.css';\nimport imgsrc from '../images/Spotify_Icon_RGB_White.png'\n\nclass Welcome extends React.Component {\n\n  render() {\n    return (\n      <div className=\"bg\">\n        <div>\n          <h1>Algorhythm Nation</h1>\n\n          <p>Where you can generate playlists to suit your needs using our (algo)rhythms.</p>\n        </div>\n\n        <div id=\"loginBtn\">\n          <button onClick={() => window.open('https://algorhythm-nation.herokuapp.com/login', \"_parent\")}> <img id='spotifyicon' src={imgsrc}></img>LOGIN VIA SPOTIFY</button>\n        </div>\n\n      </div>\n    );\n\n  }\n}\n\nexport default Welcome;\n","import React from 'react';\nimport '../App.css';\n\nclass Song extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      isAddClicked: false\n    }\n\n  }\n  handleAddClick = () => {\n    console.log('clicked')\n    this.setState ({\n      isAddClicked: !this.state.isAddClicked\n    })\n  }\n\n  convertMins = (ms) => {\n    let minutes = Math.floor(ms / 60000)\n    let leftover = Math.floor(ms % 60000)\n    let seconds = Math.floor(leftover / 1000)\n    seconds = this.leftPad(seconds)\n    return `${minutes}:${seconds}`\n  }\n\n  leftPad(number){\n    var output = number + '';\n    while(output.length < 2 ){\n      output = '0' + output;\n    }\n    return output;\n  }\n\n  render() {\n\n    return (\n      <div className=\"tbl-content\">\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n          <tbody>\n            <tr>\n              <td>{(this.props.song && <img src={this.props.song.img}/>)}</td>\n              <td>{(this.props.song && this.props.song.name)}</td>\n              <td>{(this.props.song && this.props.song.artist)}</td>\n              <td>{(this.props.song && this.convertMins(this.props.song.duration_ms))}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n}\n\nexport default Song;\n","import React from 'react';\nimport '../App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\n\nclass Navbar extends React.Component {\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div id=\"navbar\">\n        <button id=\"logoutBtn\" onClick={this.props.handleLogout}>Logout</button>\n        <h2>{this.props.username}</h2>\n        <span className='AN'>Algorhythm Nation</span>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\nimport '../App.css';\n\nclass Customizations extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      isAddClicked: false,\n      addedSongs: []\n    }\n\n  }\n  handleAddClick = () => {\n    this.setState({\n      isAddClicked: !this.state.isAddClicked\n    })\n  }\n\n  convertMins = (ms) => {\n    let minutes = Math.floor(ms / 60000)\n    let leftover = Math.floor(ms % 60000)\n    let seconds = Math.floor(leftover / 1000)\n    seconds = this.leftPad(seconds)\n    return `${minutes}:${seconds}`\n  }\n\n  leftPad(number) {\n    var output = number + '';\n    while (output.length < 2) {\n      output = '0' + output;\n    }\n    return output;\n  }\n\n  render() {\n\n\n    return (\n      <table className='songs-table'>\n        <tbody>\n          <tr>\n            <td>{(this.props.song && <img src={this.props.song.img} />)}</td>\n            <td>{(this.props.song && this.props.song.name)}</td>\n            <td>{(this.props.song && this.props.song.artist)}</td>\n            <td>{(this.props.song && this.convertMins(this.props.song.duration_ms))}</td>\n            <td><button className='add-btn' onClick={(e) => {\n              this.props.handleAddSong(this.props.song.uri)\n              this.handleAddClick()\n            }}> {this.state.isAddClicked ? 'remove' : 'add song'} </button></td>\n          </tr>\n        </tbody>\n\n      </table>\n    );\n  }\n\n}\n\nexport default Customizations;\n","import React from 'react';\nimport '../App.css';\nimport Customizations from '../components/Customizations';\n\nclass Sliders extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      valence: null,\n      energy: null,\n      tempo: null,\n      danceability: null,\n      isCreateClicked: false,\n      filteredSongs: []\n\n    }\n  }\n  //\n  customizationButton = (ev) => {\n    if (ev.target.value === 'workout') {\n      this.setState({\n        valence: .66,\n        energy: .60,\n        tempo: .51,\n        danceability: .66\n      })\n    } else if (ev.target.value === 'study') {\n      this.setState({\n        valence: .61,\n        energy: .49,\n        tempo: .49,\n        danceability: .40\n      })\n    } else if (ev.target.value === 'karaoke') {\n      this.setState({\n        valence: .50,\n        energy: .66,\n        tempo: .50,\n        danceability: .69\n      })\n    } else if (ev.target.value === 'road-trip') {\n      this.setState({\n        valence: .51,\n        energy: .68,\n        tempo: .51,\n        danceability: .52\n      })\n    }\n  }\n\n  handleSliderChange = (ev) => {\n    if (ev.target.id === 'valence') {\n      this.setState({\n        valence: ev.target.value\n      })\n    } else if (ev.target.id === 'energy') {\n      this.setState({\n        energy: ev.target.value\n      })\n    } else if (ev.target.id === 'tempo') {\n      this.setState({\n        tempo: ev.target.value\n      })\n    } else if (ev.target.id === 'danceability') {\n      this.setState({\n        danceability: ev.target.value\n      })\n    }\n  }\n\n  handleCreatePlaylist = () => {\n\n\n    this.setState({\n      isCreateClicked: !this.state.isCreateClicked,\n      valence: this.state.valence,\n      energy: this.state.energy,\n      tempo: this.state.tempo,\n      danceability: this.state.danceability\n    }, () => {\n      const valenceFilter = (this.state.valence >= .5) ? (this.props.allSongs.filter(song => song.valence > this.state.valence)) : (this.props.allSongs.filter(song => song.valence < this.state.valence))\n      const energyFilter = (this.state.energy >= .5) ? (valenceFilter.filter(song => song.energy > this.state.energy)) : (valenceFilter.filter(song => song.energy < this.state.energy))\n      const tempoFilter = (this.state.tempo >= .5) ? (energyFilter.filter(song => song.tempo > this.state.tempo)) : (energyFilter.filter(song => song.tempo < this.state.tempo))\n      const danceabilityFilter = (this.state.danceability >= .5) ? (tempoFilter.filter(song => song.danceability > this.state.danceability)) : (tempoFilter.filter(song => song.danceability < this.state.danceability))\n      this.setState({\n        filteredSongs: danceabilityFilter\n      })\n\n    })\n\n\n\n\n\n  }\n\n\n  render() {\n    return (\n      <div id=\"customize-playlist\">\n\n        <button value='workout' onClick={(ev) => this.customizationButton(ev)}>Workout Playlist</button>\n        <button value='study' onClick={(ev) => this.customizationButton(ev)}>Study Playlist</button>\n        <button value='karaoke' onClick={(ev) => this.customizationButton(ev)}>Karaoke Playlist</button>\n        <button value='road-trip' onClick={(ev) => this.customizationButton(ev)}>Road Trip Playlist</button>\n\n\n        <div className='customize-playlist'>\n          <p style={{ \"text-align\": 'center' }}>Customize how you search for your songs </p>\n\n          <div className=\"slidecontainer\">\n            <div>\n              <input onChange={(ev) => { this.handleSliderChange(ev) }} type=\"range\" id=\"valence\" className=\"slider\" value={this.state.valence} min=\"0\" max=\"1\" step=\".01\" />\n              <label for=\"valence\">Valence </label>\n            </div>\n            <div>\n              <input onChange={(ev) => { this.handleSliderChange(ev) }} type=\"range\" id=\"energy\" className=\"slider\" value={this.state.energy} min=\"0\" max=\"1\" step=\".01\" />\n              <label for=\"energy\">Energy </label>\n            </div>\n            <div>\n              <input onChange={(ev) => { this.handleSliderChange(ev) }} type=\"range\" id=\"tempo\" className=\"slider\" value={this.state.tempo} min=\"0\" max=\"1\" step=\".01\" />\n              <label for=\"tempo\">Tempo </label>\n            </div>\n            <div>\n              <input onChange={(ev) => { this.handleSliderChange(ev) }} type=\"range\" id=\"danceability\" className=\"slider\" value={this.state.danceability} min=\"0\" max=\"1\" step=\".01\" />\n              <label for=\"danceability\">Danceability </label>\n            </div>\n          </div>\n        </div>\n        <button id='show-button' onClick={this.handleCreatePlaylist}>Show me Songs</button>\n        {/* <button onClick={this.handleAutoMakePlaylist}> Do you trust me?</button> */}\n\n        <div className='customization-container'>\n          {this.state.isCreateClicked ?\n            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" className='songs-table'>\n              <thead>\n                <tr>\n                  <th>Album</th>\n                  <th>Song</th>\n                  <th>Artist</th>\n                  <th>Song Length</th>\n                  <th>Add Song</th>\n                </tr>\n              </thead>\n            </table>\n            : null}\n\n          {this.state.isCreateClicked ? (this.state.filteredSongs && this.state.filteredSongs.map((song) => {\n            return <Customizations handleAddClick={this.props.handleAddClick} song={song} handleAddSong={this.props.handleAddSong} />\n          }))\n            : null}\n\n        </div>\n\n\n\n      </div>\n    );\n  }\n\n}\n\nexport default Sliders;\n\n// () => this.props.onPlaylistClick(this.props.playlist.id)\n//\n// {this.props.isClicked ? (\n//   this.props.playlistSongs.songs && this.props.playlistSongs.songs.map((song) => {\n//     return <Song isClicked={this.props.isClicked} song={song} />\n//   }))\n//   : <Sliders allSongs={this.props.allSongs}/>}\n","import React from 'react';\nimport '../App.css';\nimport Sliders from '../components/Sliders'\nimport Song from '../components/Song'\nconst PLAYLISTS_URL = 'https://algorhythm-nation.herokuapp.com/playlists'\n\nclass CreatePlaylists extends React.Component {\n\n\n  render() {\n    return (\n      <div>\n        {this.props.isClicked ? <h1> {this.props.current_playlist.name} </h1> : <h1>Customize a New Playlist</h1>}\n        <div>\n          {this.props.isClicked ?\n            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n\n              <tr>\n                <th>Album</th>\n                <th>Song</th>\n                <th>Artist</th>\n                <th>Song Length</th>\n              </tr>\n\n            </table>\n            : null}\n          {this.props.isClicked ? (\n            this.props.playlistSongs.songs && this.props.playlistSongs.songs.map((song) => {\n              return <Song isClicked={this.props.isClicked} song={song} />\n            }))\n            : <Sliders allSongs={this.props.allSongs} handleAddSong={this.props.handleAddSong} />}\n        </div>\n\n      </div>\n\n    );\n  }\n\n}\n\nexport default CreatePlaylists;\n","import React from 'react';\nimport '../App.css';\n\nclass PlaylistCard extends React.Component {\n\n    render() {\n\n        return (\n            <div>\n              <div onClick={() => this.props.onPlaylistClick(this.props.playlist.id)}>\n                    <h5 className='playlist-name'>{this.props.playlist.name}</h5>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default PlaylistCard;\n","import React from 'react';\nimport '../App.css';\nimport PlaylistCard from '../components/PlaylistCard'\n\nfunction SavedPlaylists(props) {\n\n  if (props.allPlaylists != null) {\n\n    return (\n      <div>\n        <h1 className='h1-current'>Playlists</h1>\n        <div className='playlist-content'>\n          {props.allPlaylists.map(playlist => {\n            if (!playlist.name.includes('Library')) {\n              return <PlaylistCard\n                isClicked={props.isClicked}\n                onPlaylistClick={(e) => props.onPlaylistClick(playlist)}\n                key={playlist.id}\n                playlist={playlist}\n                playlistSongs={props.playlistSongs}\n              />\n            }\n          })}\n        </div>\n      </div>\n    )\n\n\n  } else {\n\n    return <div><h1>No Saved Playlists! :(</h1></div>\n\n\n  }\n}\n\nexport default SavedPlaylists;\n","import React from 'react';\nimport '../App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\n\nimport Navbar from '../components/Navbar'\nimport CreatePlaylists from '../containers/CreatePlaylists'\nimport SavedPlaylists from '../containers/SavedPlaylists'\nimport Sliders from '../components/Sliders'\n\nconst BACKEND_URL = 'https://algorhythm-nation.herokuapp.com'\nconst PLAYLISTS_URL = 'https://algorhythm-nation.herokuapp.com/playlists'\nconst SONGS_URL = 'https://algorhythm-nation.herokuapp.com/songs'\n\nclass User extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      allPlaylists: null,\n      songs: [],\n      playlistSongs: [],\n      isClicked: false,\n      current_user: {},\n      current_playlist: {},\n      addSongs: []\n    }\n  };\n\n  componentDidMount() {\n    // saving the user's access token to local storage\n    let token = this.props.location.search.substr(7)\n    localStorage.setItem('token', token)\n\n    fetch(`${BACKEND_URL}/users?token=${token}`)\n      .then(resp => resp.json())\n      .then(user_data => this.setState({ current_user: user_data }))\n\n    fetch(`${PLAYLISTS_URL}?token=${token}`)\n      .then(resp => resp.json())\n      .then(playlistData => this.setState({ allPlaylists: playlistData }))\n\n    fetch(`${SONGS_URL}?token=${token}`)\n      .then(resp => resp.json())\n      .then(songData => this.setState({ songs: songData }))\n  }\n\n  onPlaylistClick = (playlist) => {\n    let token = localStorage.getItem('token')\n    fetch(`${PLAYLISTS_URL}/${playlist.id}?token=${token}`)\n      .then(resp => resp.json())\n      .then(playlistSongData => this.setState({ playlistSongs: playlistSongData, current_playlist: playlist }))\n\n    this.setState({\n      isClicked: !this.state.isClicked\n    })\n  }\n\n  handleLogout = () => {\n    localStorage.clear()\n    window.open('http://localhost:3000', \"_parent\")\n  }\n\n  handleAddSong = uri => {\n    if (this.state.addSongs.includes(uri)) {\n      let newSongs = this.state.addSongs.filter(deleteUri => uri !== deleteUri)\n      this.setState({ addSongs: newSongs })\n    } else {\n      this.setState({ addSongs: [...this.state.addSongs, uri] })\n    }\n  }\n\n  postPlaylist = ev => {\n    ev.preventDefault()\n    fetch(PLAYLISTS_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        token: localStorage.getItem('token'),\n        playlistname: ev.target.playlistname.value,\n        uris: this.state.addSongs\n      })\n    }).then(resp => resp.json())\n      .then(newPlaylist => {\n        console.log(newPlaylist)\n        this.setState(prevState => { { allPlaylists: prevState.allPlaylists.unshift(newPlaylist) } })\n      })\n\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar handleLogout={this.handleLogout} username={this.state.current_user.username} />\n        <div className='grid-container'>\n\n          <div className='right-container'>\n            <CreatePlaylists allSongs={this.state.songs} isClicked={this.state.isClicked} playlistSongs={this.state.playlistSongs} current_playlist={this.state.current_playlist} handleAddSong={this.handleAddSong} />\n          </div>\n\n          <div className='left-container'>\n            <SavedPlaylists isClicked={this.state.isClicked} playlistSongs={this.state.playlistSongs} onPlaylistClick={this.onPlaylistClick} allPlaylists={this.state.allPlaylists} current_playlist={this.state.current_playlist} />\n          </div>\n\n          <div className='bottom-container'>\n            {!this.state.isClicked ?\n              <div>\n                <form name='new-playlist-form' onSubmit={this.postPlaylist}>\n                  <input name='playlistname' type='text' placeholder='Awesome Playlist Name'></input>\n                  <button type='submit' className='save-button'>Save my Playlist</button>\n                </form>\n              </div> : null}\n          </div>\n        </div>\n      </Router>\n    )\n  }\n\n}\n\nexport default User;\n","import React from 'react';\nimport '../App.css';\n\nclass ErrorMsg extends React.Component {\n\n    render() {\n        return (\n            <div >\n                <h1>this be a ErrorMsg</h1>\n            </div>\n        );\n    }\n\n}\n\nexport default ErrorMsg;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport queryString from 'query-string'\nimport './App.css';\n\nimport Welcome from './components/Welcome';\nimport Song from './components/Song';\nimport User from './containers/User'\nimport ErrorMsg from './components/ErrorMsg'\n\nimport SavedPlaylists from './containers/SavedPlaylists'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { serverData: {} }\n  }\n\n\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\" >\n          <Route exact path='/' component={Welcome} />\n          <Route exact path='/user' component={User} />\n          <Route exact path='/error' component={ErrorMsg} />\n        </div>\n      </Router>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}